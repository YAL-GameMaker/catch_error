<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>catch_error_init();
show_debug_message("ready? " + string(catch_error_is_ready()));
catch_error_set_prompt(catch_error_prompt_question,
    "This wonderful little demo encountered an error.
Would you like to restart the program and view the error?",
    "Oh no,");
catch_error_set_normal(catch_error_normal_queue);
catch_error_set_fatal(catch_error_fatal_queue);
//catch_error_set_newer(catch_error_newer_ignore);
error_file = "misc/error.log";
catch_error_set_dump_path(error_file);
// let the program restart itself on error
var argv = "", argc = parameter_count();
for (var i = 1; i &lt; argc; i++) {
    if (i &gt; 1) argv += " ";
    var v = parameter_string(i);
    if (string_pos(" ", v)) argv += '"' + v + '"'; else argv += v;
}
catch_error_set_exec(parameter_string(0), argv);
//
//show_message("?");
error_text = "";
if (file_exists(error_file)) {
    var buf = buffer_load(error_file);
    error_text = buffer_read(buf, buffer_string);
    buffer_delete(buf);
    file_delete(error_file);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// have a loop if you want to error a lot
var s = catch_error_dequeue();
if (s != "") {
s = string_replace_all(s, "#", "\#");
error_text = s;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_test);
draw_set_color(c_white);

draw_text(5, 5, "Try things:
1: Non-fatal error (show_error)
2: Non-fatal error (built-in)
3: Fatal error (show_error)
4: Fatal error (built-in)
5: Fatal error (new format - ignore only)
Timer: " + string(current_time / 1000));
draw_text(5, 140, error_text);
if (keyboard_check_pressed(ord("1"))) show_error("An error! Time:" + date_datetime_string(date_current_datetime()), false);
if (keyboard_check_pressed(ord("2"))) draw_surface(-4, 0, 0);
if (keyboard_check_pressed(ord("3"))) show_error("A fatal error! Time:" + date_datetime_string(date_current_datetime()), 1);
if (keyboard_check_pressed(ord("4"))) vertex_submit(-4, -4, -4);
if (keyboard_check_pressed(ord("5"))) {
	//catch_error_set_newer(catch_error_newer_ignore);
	var v = 1;v += undefine;
	//vertex_begin(-1, -1);
	//catch_error_set_newer(catch_error_newer_allow);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
